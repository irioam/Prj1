print(sunspots)
class(sunspots)
help("sunspots")
# instalação de pacotes necessários
install.packages("forecast")
install.packages("ggplot2")
install.packages("urca")
install.packages("lmtest")
install.packages("seasonal")
install.packages("seasonalview")
#criação de um TS
myts = rnorm(60)
myts = ts(myts, start = c(2012,1), end = c(2016,12), frequency = 1)
#criação de um TS
myts = rnorm(60)
myts = ts(myts, start = c(2012,1), end = c(2016,12), frequency = 12)
myts
class(myts)
plot(myts)
plot(myts)
#criação de um TS
myts = rnorm(60)
myts = ts(myts, start = c(2012,1), end = c(2016,12), frequency = 12)
myts
class(myts)
plot(myts)
install.packages("seasonalview")
#criação de um TS
myts = rnorm(60)
myts = ts(myts, start = c(2012,1), end = c(2016,12), frequency = 12)
myts
class(myts)
plot(myts)
tempts = read.csv(file.choose(), sep=",", header = F)
print(tempts)
tempts = ts(tempts[2], start = c(1884), end = c(1939), frequency = 1)
class(tempts)
plot(tempts)
#plotar os dados em um gráfico padrão
plot(tempts)
plot(sunspots)
print(sun2)
print(sunspots)  # imprime a série temporal.
help("sunspots") # exibe um texto a respeito da TS.
max(sunspots) # valor máximo da TS
min(sunspots) # valor mínimo da TS
mean(sunspots) # média
median(sunspots) # mediana
summary(sunspots) # resumo: menor valor, 1º quartil, mediana, média, 3º quartil e o maior valor.
length(sunspots) # saber a quantidade de dados da TS
start(sunspots) #exibe quando a série inicia
end(sunspots)   #exibe quando a série termina
frequency(sunspots)
#window -> cria um subconjunto dos dados de outro conjunto
# sun2 é o novo conjunto ou melhor a nova TS
sun2 = window(sunspots, start=c(1749,1), end=c(1763,12) )
print(sun2)
plot(sunspots)
hist(sunspots)
boxplot(sunspots)
library(ggplot2)
library(forecast)
autoplot(sunspots)
autoplot(AirPassengers)
sun2 = window(sunspots, start=c(1749,1), end=c(1763,12) )
plot()
plot(sun2)
print(sun2)
hist(sun2)
autoplot(sun2)
boxplot(sun2)
plot(aggregate(AirPassengers, FUN = mean))
install.packages(plotly)
#plotar os dados em um gráfico padrão
plot(tempts)
library(plotly)
install.packages("plotly")
library(plotly)
#plotar os dados em um gráfico padrão
plot(tempts)
citation()
demo(persp())
demo(graphics.off)
demo(graphics)
7+8+1
prod(3,3,3)
factorial(5)
demo(graphics)
factorial(5)
fExemplo(3)
autoplot(presidents)
library(ggplot2)
library(forecast)
library(plotly)
autoplot(presidents)
# criando um modelo preditivo utilizando o auto.arima
prev = auto.arima(presidents)
print(prev$residuals)
autoplot(prev$residuals)
hist(prev$residuals)
var(prev$residuals, na.rm = T)
mean(as.vector(prev$residuals), na.rm = T)
acf(prev$residuals, na.action = na.pass)
checkresiduals(prev)
# criando um modelo preditivo utilizando o auto.arima
# auto.arima é um dos modelos preditivos mais poderosos
modelo_prev = auto.arima(presidents)
#mostra um gráficos simples
autoplot(presidents)
# criando um modelo preditivo utilizando o auto.arima
# auto.arima é um dos modelos preditivos mais poderosos
modelo_prev = auto.arima(presidents)
print(modelo_prev$residuals)
autoplot(modelo_prev$residuals)
hist(modelo_prev$residuals)
var(modelo_prev$residuals, na.rm = T)
mean(as.vector(modelo_prev$residuals), na.rm = T)
acf(modelo_prev$residuals, na.action = na.pass)
checkresiduals(modelo_prev)
print(modelo_prev$residuals)
# mostra um gráfico do modelo
autoplot(modelo_prev$residuals)
# mostra um histograma
hist(modelo_prev$residuals)
# mostra a variância
var(modelo_prev$residuals, na.rm = T)
# média
mean(as.vector(modelo_prev$residuals), na.rm = T)
# diagrama de correlação desses residuais
acf(modelo_prev$residuals, na.action = na.pass)
#analisar os residuais
checkresiduals(modelo_prev)
# pré-requisitos para requisitos devem ser normalmente distribuídos.
shapiro.test(modelo_prev$residuals)
library(urca)
library(forecast)
x = ur.kpss(AirPassengers)
print(x)
z = diff(AirPassengers)
x = ur.kpss(z)
print(x)
#agora o resultado ficou com 0,01 portanto a TS ficou estacionária
plot(x)
ndiffs(AirPassengers)
split.screen(figs = c(2,1))
screen(1)
plot(AirPassengers)
screen(2)
plot(z)
t1 = BoxCox(AirPassengers, lambda = 0)
autoplot(t1)
t1 = BoxCox(AirPassengers, lambda = 0.1)
autoplot(t2)
autoplot(t1)
autoplot(t2)
autoplot(t2)
t1 = BoxCox(AirPassengers, lambda = 0.1)
autoplot(t2)
t1 = BoxCox(AirPassengers, lambda = 0)
autoplot(t1)
t2 = BoxCox(AirPassengers, lambda = 0.1)
autoplot(t2)
lbd = BoxCox.lambda(AirPassengers)
print(lbd)
t3 = BoxCox(AirPassengers, lambda = lbd)
print(t3)
autoplot(t3)
t4 = diff(AirPassengers)
autoplot(t4)
t5 = log10(AirPassengers)
autoplot(t5)
split.screen(figs = c(2,2))
screen(1)
split.screen(figs = c(2,2))
screen(1)
plot(t1)
screen(2)
plot(t2)
screen(3)
plot(t3)
screen(4)
plot(t4)
split.screen(figs = c(2,2))
screen(1)
plot(t1)
screen(2)
plot(t2)
screen(3)
plot(t3)
screen(4)
plot(t4)
close.screen(all = T)
split.screen(figs = c(2,2))
screen(1)
plot(t1)
screen(2)
plot(t2)
screen(3)
plot(t3)
screen(4)
plot(t5)
close.screen(all = T)
ndiffs(AirPassengers)
# avaliar Residuos no R
library(ggplot2)
library(forecast)
library(plotly)
#mostra um gráficos simples
autoplot(presidents)
# criando um modelo preditivo utilizando o auto.arima
# auto.arima é um dos modelos preditivos mais poderosos
modelo_prev = auto.arima(presidents)
# exibe os dados do modelo
print(modelo_prev$residuals)
# mostra um gráfico do modelo
autoplot(modelo_prev$residuals)
# mostra um histograma
hist(modelo_prev$residuals)
# mostra a variância
var(modelo_prev$residuals, na.rm = T)
# média como vetor dos resíduos
mean(as.vector(modelo_prev$residuals), na.rm = T)
# diagrama de correlação desses residuais
acf(modelo_prev$residuals, na.action = na.pass)
#analisar os residuais
checkresiduals(modelo_prev)
# pré-requisitos para requisitos devem ser normalmente distribuídos.
# testar se o modelo está normalmente distribuído
shapiro.test(modelo_prev$residuals)
library(urca)
# a TS AirPassenger que é uma série que tem Tendência e Sazonalidade e
# por isso provavelmente tem Estacionaridade
x = ur.kpss(AirPassengers)
# exibir o resultado
print(x)
# como o resultado está muito acima de 0,05 esta série não é estacionária
# diff irá realizar a diferenciação e armazena em z
z = diff(AirPassengers)
x = ur.kpss(z)
print(x)
#agora o resultado ficou com 0,01 portanto há indícios de que a
# TS ficou estacionária
plot(x)
ndiffs(AirPassengers)
split.screen(figs = c(2,1))
screen(1)
plot(AirPassengers)
screen(2)
plot(z)
t1 = BoxCox(AirPassengers, lambda = 0)
autoplot(t1)
t2 = BoxCox(AirPassengers, lambda = 0.1)
autoplot(t2)
t1 = BoxCox(AirPassengers, lambda = 0)
split.screen(figs = c(2,1))
screen(1)
autoplot(t1)
t2 = BoxCox(AirPassengers, lambda = 0.1)
screen(2)
autoplot(t2)
autoplot(t1)
autoplot(t2)
lbd = BoxCox.lambda(AirPassengers)
print(lbd)
t3 = BoxCox(AirPassengers, lambda = lbd)
print(t3)
autoplot(t3)
t4 = diff(AirPassengers)
autoplot(t4)
t5 = log10(AirPassengers)
autoplot(t5)
split.screen(figs = c(2,2))
screen(1)
plot(t1)
screen(2)
plot(t2)
screen(3)
plot(t3)
screen(4)
plot(t5)
close.screen(all = T)
split.screen(figs = c(2,2))
screen(1)
plot(t1)
screen(2)
plot(t2)
screen(3)
plot(t3)
screen(4)
plot(t5)
close.screen(all = T)
autoplot(fdeaths)
library(ggplot2)
library(forecast)
library(plotly)
library(urca)
fdeaths2 = ma(fdaths, order=5)
fdeaths2 = ma(fdeaths, order=5)
autoplot(fdeaths2)
fdeaths3 = ma(fdeaths, order=12)
autoplot(fdeaths3)
fdeaths4 = tsclean(fdeaths)
autoplot(fdeaths4)
plot(fdeaths)
plot(fdeaths)
lines(fdeaths2, col="red")
lines(fdeaths3, col="blue")
lines(fdeaths4, col="green")
legend("topright", legend = c("Orig.", "Ma5", "Ma12", "Tsc"), col = c("black","red","blue","green"), lty = 1:2, cex = 0.8)
legend("topright", legend = c("Orig.", "Ma5", "Ma12", "Tsc"), col = c("black","red","blue","green"), lty = 1:3, cex = 0.8)
legend("topright", legend = c("Orig.", "Ma5", "Ma12", "Tsc"), col = c("black","red","blue","green"), lty = 1:2, cex = 0.8)
legend("topright", legend = c("Orig.", "Ma5", "Ma12", "Tsc"), col = c("black","red","blue","green"), lty = 1:3, cex = 0.8)
legend("topright", legend = c("Orig.", "Ma5", "Ma12", "Tsc"), col = c("black","red","blue","green"), lty = 1:2, cex = 1.8)
legend("topright", legend = c("Orig.", "Ma5", "Ma12", "Tsc"), col = c("black","red","blue","green"), lty = 1:2, cex = 0.8)
legend("topright", legend = c("Orig.", "Ma5", "Ma12", "Tsc"), col = c("black","red","blue","green"), lty = 1:2, cex = 0.8)
legend("topright", legend = c("Orig.", "Ma5", "Ma12", "Tsc"), col = c("black","red","blue","green"), lty = 1:2, cex = 0.8)
plot(fdeaths)
lines(fdeaths2, col="red")
lines(fdeaths3, col="blue")
lines(fdeaths4, col="green")
legend("topright", legend = c("Orig.", "Ma5", "Ma12", "Tsc"), col = c("black","red","blue","green"), lty = 1:2, cex = 0.8)
library(forecast)
library(ggplot2)
x = cumsum(sample(c(-1,1),100, T))
print(x)
serie = ts(x, start = c(1900), end = c(2000), frequency = 1)
print(serie)
autoplot(serie)
prev = naive(serie,h=5)
class(prev)
print(prev)
print(prev$fitted)
print(prev$residuals)
autoplot(prev)
prev2 = naive(serie, h=5, level = c(95,99))
print(prev2)
autoplot(prev2)
split.screen(figs = c(2,1))
screen(1)
plot(prev)
screen(2)
plot(prev2)
close.screen(all=T)
prev2 = naive(serie, h=5, level = c(95,99))
print(prev2)
autoplot(prev2)
split.screen(figs = c(2,1))
screen(1)
plot(prev)
screen(2)
plot(prev2)
close.screen(all=T)
library(forecast)
library(ggplot2)
set.seed(4312)
x = cumsum(sample(c(-1,1),100, T))
print(x)
serie = ts(x, start = c(1900), end = c(2000), frequency = 1)
print(serie)
autoplot(serie)
prev = naive(serie,h=5)
class(prev)
print(prev)
print(prev$fitted)
print(prev$residuals)
autoplot(prev)
prev2 = naive(serie, h=5, level = c(95,99))
print(prev2)
autoplot(prev2)
split.screen(figs = c(2,1))
screen(1)
plot(prev)
screen(2)
plot(prev2)
close.screen(all=T)
setwd("D:/Meus Documentos/Meu Drive/Datascience Academy/Cientista de Dados/Git/Prj1/Pré-Processamento")
